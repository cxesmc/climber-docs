{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CLIMBER-X , a fast Earth system model. CLIMBER-X simulates the response of the Earth system to changes in different climate forcings, such as changes in greenhouse gas concentrations or in the Earth's orbital configuration. To do so the model represents the physical processes in atmosphere, ocean and on land that determine the climate state of the Earth. It also simulates the bio- and geochemical processes in the biosphere, soil, ocean and marine sediments and therefore allows for an interactive determination of the atmospheric CO2 and methane concentrations. CLIMBER-X also includes two different models for the continental ice sheets and a model for the response of the solid Earth to changes in surface load. Specifically, the model includes the following components: SESAM: semi-empirical statistical-dynamical atmosphere model GOLDSTEIN: 3-D frictional-geostrophic ocean model HAMOCC: ocean and sediments carbon cycle model SISIM: sea ice model PALADYN: land model Yelmo or SICOPOLIS: ice sheet models VILMA: viscoelastic lithosphere and mantle model The general CLIMBER-X design and the details of the climate model component are described in the following article: Willeit, M., Ganopolski, A., Robinson, A., and Edwards, N. R.: The Earth system model CLIMBER-X v1.0 \u2013 Part 1: Climate model description and validation, Geosci. Model Dev., 15, 5905\u20135948, https://doi.org/10.5194/gmd-15-5905-2022 , 2022. The global carbon cycle model of CLIMBER-X is described in: Willeit, M., Ilyina, T., Liu, B., Heinze, C., Perrette, M., Heinemann, M., Dalmonech, D., Brovkin, V., Munhoven, G., B\u00f6rker, J., Hartmann, J., Romero-Mujalli, G., and Ganopolski, A.: The Earth system model CLIMBER-X v1.0 \u2013 Part 2: The global carbon cycle, Geosci. Model Dev., 16, 3501\u20133534, https://doi. org/10.5194/gmd-16-3501-2023 , 2023. The ice sheet model coupling and the ice sheet surface mass balance scheme are described in: Willeit, M., Calov, R., Talento, S., Greve, R., Bernales, J., Klemann, V., Bagge, M., and Ganopolski, A.: Glacial inception through rapid ice area increase driven by albedo and vegetation feedbacks, Clim. Past, 20, 597\u2013623, https://doi.org/10.5194/cp-20-597-2024 , 2024. The CLIMBER-X code repository can be found here: https://github.com/cxesmc/climber-x See Getting started to see how to get the code, compile a test program and run simulations.","title":"Home"},{"location":"TODO/","text":"TO DO Update docs with latest compilation instructions. Delete compiled Yelmo version. Add real(...,sp) wrapper to writing yelmo output in ice_model::yelmo_write_step_2D() . Get climber-clim version compiling with gfortran . Delete compiled coordinates version. Add instructions to download coordinates and configure it. Consider removing dummy geo and bgc, and rather use preprocessor statements. At least for VILMA, this probably makes a lot of sense. For bgc, perhaps see below to make dummy usage easier. Where possible, make _def.f90 files for model components, so that the derived types are defined separately from the model itself. Then remaining dummy files will be much smaller and easier to maintain. Compilation Make different compilation commands for different sections of the code (could help with compiling during development phases, to avoid repeatedly compiling full code) Make default model version the minimal version without major dependencies. Find out how to check which Makefile 'target' was called, to be able to properly set the LDFLAGS (LFLAGS+FFLAGS) climber-clim: minimal configuration with ocn,atm,lnd,sic climber-clim-bgc: plus with bgc climber-clim-ice climber-clim-bgc-ice climber: climber-clim-bgc-ice atm bgc bnd ch4 co2 geo ice ice_sico imo lnd lndvc main ocn sic smb utils vilma yelmo: yelmo-static possible later options: ice-yelmo ice-sico","title":"TO DO"},{"location":"TODO/#to-do","text":"Update docs with latest compilation instructions. Delete compiled Yelmo version. Add real(...,sp) wrapper to writing yelmo output in ice_model::yelmo_write_step_2D() . Get climber-clim version compiling with gfortran . Delete compiled coordinates version. Add instructions to download coordinates and configure it. Consider removing dummy geo and bgc, and rather use preprocessor statements. At least for VILMA, this probably makes a lot of sense. For bgc, perhaps see below to make dummy usage easier. Where possible, make _def.f90 files for model components, so that the derived types are defined separately from the model itself. Then remaining dummy files will be much smaller and easier to maintain.","title":"TO DO"},{"location":"TODO/#compilation","text":"Make different compilation commands for different sections of the code (could help with compiling during development phases, to avoid repeatedly compiling full code) Make default model version the minimal version without major dependencies. Find out how to check which Makefile 'target' was called, to be able to properly set the LDFLAGS (LFLAGS+FFLAGS) climber-clim: minimal configuration with ocn,atm,lnd,sic climber-clim-bgc: plus with bgc climber-clim-ice climber-clim-bgc-ice climber: climber-clim-bgc-ice atm bgc bnd ch4 co2 geo ice ice_sico imo lnd lndvc main ocn sic smb utils vilma yelmo: yelmo-static possible later options: ice-yelmo ice-sico","title":"Compilation"},{"location":"climber-variables-atm/","text":"Variables list Atmosphere (atm.nc) variable dimensions units long_name fw_atl_indpac 2D Sv Freshwater transport from Atlantic to Indo-Pacific fw_pac_atl 2D Sv Freshwater transport from Pacific to Atlantic had_fi 2D Deg had_width 2D Deg acbarz 3D Rad Zonal mean cross-isobar angle coszm 3D Radiation weighted daily mean cosine of solar zenith angle ekez 3D m\u00b2/s\u00b2 Zonal mean eddy kinetic energy faycptg 3D PW Meridional cp*T transport by mean circulation faydseg 3D PW Meridional dry static energy transport by mean circulation fayg 3D fayleg 3D PW Meridional latent heat transport by mean circulation faywtrg 3D kg/s Meridional moisture transport by mean circulation frlnd 3D Land fraction in grid cell frocn 3D Ocean fraction in grid cell fyseg 3D PW Total meridional dry static energy transport fyheatg 3D PW Total meridional heat transport fyleg 3D PW Total meridional latent heat transport fywtrg 3D kg/s Total meridional moisture transport ptrop 3D Relative pressure at tropopause slope 3D m/m Topography slope slope_x 3D m/m Topography slope in zonal direction slope_y 3D m/m Topography slope in meridional direction slpz 3D Pa Zonal mean sea level pressure solarm 3D W/m\u00b2 Daily mean TOA incoming solar radiation tskslz 3D K Zonal mean skin temperature reduced to sea level tslz 3D K Zonal mean sea level temperature uz500 3D m/s Zonal mean 500 hPa zonal wind uz850 3D m/s Zonal mean 850 hPa zonal wind vabz 3D m/s Zonal mean meridional ageostrophic wind in PBL zsa 3D m Grid cell average surface elevation zsa_smooth 3D m Grid cell average smoothed surface elevation","title":"Variables list"},{"location":"climber-variables-atm/#variables-list","text":"","title":"Variables list"},{"location":"climber-variables-atm/#atmosphere-atmnc","text":"variable dimensions units long_name fw_atl_indpac 2D Sv Freshwater transport from Atlantic to Indo-Pacific fw_pac_atl 2D Sv Freshwater transport from Pacific to Atlantic had_fi 2D Deg had_width 2D Deg acbarz 3D Rad Zonal mean cross-isobar angle coszm 3D Radiation weighted daily mean cosine of solar zenith angle ekez 3D m\u00b2/s\u00b2 Zonal mean eddy kinetic energy faycptg 3D PW Meridional cp*T transport by mean circulation faydseg 3D PW Meridional dry static energy transport by mean circulation fayg 3D fayleg 3D PW Meridional latent heat transport by mean circulation faywtrg 3D kg/s Meridional moisture transport by mean circulation frlnd 3D Land fraction in grid cell frocn 3D Ocean fraction in grid cell fyseg 3D PW Total meridional dry static energy transport fyheatg 3D PW Total meridional heat transport fyleg 3D PW Total meridional latent heat transport fywtrg 3D kg/s Total meridional moisture transport ptrop 3D Relative pressure at tropopause slope 3D m/m Topography slope slope_x 3D m/m Topography slope in zonal direction slope_y 3D m/m Topography slope in meridional direction slpz 3D Pa Zonal mean sea level pressure solarm 3D W/m\u00b2 Daily mean TOA incoming solar radiation tskslz 3D K Zonal mean skin temperature reduced to sea level tslz 3D K Zonal mean sea level temperature uz500 3D m/s Zonal mean 500 hPa zonal wind uz850 3D m/s Zonal mean 850 hPa zonal wind vabz 3D m/s Zonal mean meridional ageostrophic wind in PBL zsa 3D m Grid cell average surface elevation zsa_smooth 3D m Grid cell average smoothed surface elevation","title":"Atmosphere (atm.nc)"},{"location":"dependencies/","text":"Dependencies CLIMBER-X is dependent on the following libraries: NetCDF: NetCDF library FFTW (ver. 3.9+) coordinates: coordinates , a module to handle grid/points definition, interpolation mapping and subsetting. The library will have to be compiled from the original source code. Python 3.x, which is only needed for automatic configuration of the Makefile and the use of the runme script for job preparation and submission. runner: 'runner' Python library (fesmc version) CDO: Climate Data Operators , used for more efficient creation of maps to transform between different coordinate grids. Needed only if running with coupled ice sheets: Yelmo: Yelmo ice sheet model . The library will have to be compiled from the original source code. LIS: Library of Iterative Solvers for Linear Systems . The library will have to be compiled from the original source code. Installation tips for each dependency can be found below. Installing NetCDF (preferably version 4.0 or higher) The NetCDF library is typically available with different distributions (Linux, Mac, etc). Along with installing libnetcdf , it will be necessary to install the package libnetcdf-dev . Installing the NetCDF viewing program ncview is also recommended. If you want to install NetCDF from source, then you must install both the netcdf-c and subsequently netcdf-fortran libraries. The source code and installation instructions are available from the Unidata website: https://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html Installing coordinates Download the coordinates source: https://github.com/fesmc/coordinates . Configure the package, and install it in the location of your choice (below defined as $COORDROOT ): git clone git@github.com:fesmc/coordinates.git $COORDROOT cd $COORDROOT python config.py config/pik_hpc2024_ifx make clean make coord-static openmp=1 Install LIS, FFTW and utils These packages could be installed individually and linked into the main directories of Yelmox and Yelmo. However, to ensure the right versions are used, etc., we have now made a separate repository for managing the installation of LIS and FFTW from the versions available in that repository, as well as some custom modules. This repository is managed as part of the Fast Earth System Model Community (FESMC). Please download the code from this repository and see the README for installation instructions: https://github.com/fesmc/fesm-utils Installing runner Install runner to your system's Python installation via pip . pip install https://github.com/fesmc/runner/archive/refs/heads/master.zip That's it! Now check that system command job is available by running job -h . If the command is not found, it means that the Python bin directory is not available in your PATH . To add it, typically something like this is needed in your .profile or .bashrc file: PATH=${PATH}:${HOME}/.local/bin export PATH","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"CLIMBER-X is dependent on the following libraries: NetCDF: NetCDF library FFTW (ver. 3.9+) coordinates: coordinates , a module to handle grid/points definition, interpolation mapping and subsetting. The library will have to be compiled from the original source code. Python 3.x, which is only needed for automatic configuration of the Makefile and the use of the runme script for job preparation and submission. runner: 'runner' Python library (fesmc version) CDO: Climate Data Operators , used for more efficient creation of maps to transform between different coordinate grids. Needed only if running with coupled ice sheets: Yelmo: Yelmo ice sheet model . The library will have to be compiled from the original source code. LIS: Library of Iterative Solvers for Linear Systems . The library will have to be compiled from the original source code. Installation tips for each dependency can be found below.","title":"Dependencies"},{"location":"dependencies/#installing-netcdf-preferably-version-40-or-higher","text":"The NetCDF library is typically available with different distributions (Linux, Mac, etc). Along with installing libnetcdf , it will be necessary to install the package libnetcdf-dev . Installing the NetCDF viewing program ncview is also recommended. If you want to install NetCDF from source, then you must install both the netcdf-c and subsequently netcdf-fortran libraries. The source code and installation instructions are available from the Unidata website: https://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html","title":"Installing NetCDF (preferably version 4.0 or higher)"},{"location":"dependencies/#installing-coordinates","text":"Download the coordinates source: https://github.com/fesmc/coordinates . Configure the package, and install it in the location of your choice (below defined as $COORDROOT ): git clone git@github.com:fesmc/coordinates.git $COORDROOT cd $COORDROOT python config.py config/pik_hpc2024_ifx make clean make coord-static openmp=1","title":"Installing coordinates"},{"location":"dependencies/#install-lis-fftw-and-utils","text":"These packages could be installed individually and linked into the main directories of Yelmox and Yelmo. However, to ensure the right versions are used, etc., we have now made a separate repository for managing the installation of LIS and FFTW from the versions available in that repository, as well as some custom modules. This repository is managed as part of the Fast Earth System Model Community (FESMC). Please download the code from this repository and see the README for installation instructions: https://github.com/fesmc/fesm-utils","title":"Install LIS, FFTW and utils"},{"location":"dependencies/#installing-runner","text":"Install runner to your system's Python installation via pip . pip install https://github.com/fesmc/runner/archive/refs/heads/master.zip That's it! Now check that system command job is available by running job -h . If the command is not found, it means that the Python bin directory is not available in your PATH . To add it, typically something like this is needed in your .profile or .bashrc file: PATH=${PATH}:${HOME}/.local/bin export PATH","title":"Installing runner"},{"location":"dir-struct/","text":"Directory structure config/ Configuration files for compilation on different systems. input/ Location of any input data needed by the model. output/ Default location for model output. maps/ Location of the maps that will be generated to map/interpolate between different grids. nml/ Default parameter namelists that manage the model configuration. restart/ Location of the restart files needed to continue previous model simulations. src/ Source code for CLIMBER-X.","title":"Dir struct"},{"location":"dir-struct/#directory-structure","text":"config/ Configuration files for compilation on different systems. input/ Location of any input data needed by the model. output/ Default location for model output. maps/ Location of the maps that will be generated to map/interpolate between different grids. nml/ Default parameter namelists that manage the model configuration. restart/ Location of the restart files needed to continue previous model simulations. src/ Source code for CLIMBER-X.","title":"Directory structure"},{"location":"getting-started/","text":"Getting started Here you can find the basic information and steps needed to get CLIMBER-X running. Some step-by-step commands are given for specific environments. To see how to install CLIMBER-X on an HPC, see: Running-on-hpc for detailed instructions. There are currently four different flavors of CLIMBER-X that can be set up: climber-clim : minimal climate model configuration with atmosphere, ocean, sea ice and land (including dynamic vegetation) climber-clim-bgc : coupled climate-carbon cycle model configuration; clim plus with ocean biogeochemistry climber-clim-ice : coupled climate-ice sheet model configuration; clim plus with ice sheets climber-clim-bgc-ice : fully coupled model configuration; clim plus with ocean biogeochemistry and ice sheets The model dependencies vary according to the desired model configuration: Dependencies are: NetCDF, coordinates, Python3.x, runner, CDO Additional dependencies if using coupled ice sheets are: Yelmo, LIS See: Dependencies for more details. Directory structure config/ Configuration files for compilation on different systems. input/ Location of any input data needed by the model. output/ Default location for model output. maps/ Location of the maps that will be generated to map/interpolate between different grids. nml/ Default parameter namelists that manage the model configuration. restart/ Location of the restart files needed to continue previous model simulations. src/ Source code for CLIMBER-X. Usage Follow the steps below to (1) obtain the code, (2) configure the Makefile for your system, (3) compile an executable program and (4) run a test simulation. 1. Get the code Clone the repository from https://github.com/cxesmc/climber-x : # Clone code repository git clone https://github.com/cxesmc/climber-x.git git clone git@github.com:cxesmc/climber-x.git # via ssh cd climber-x # Clone input file directory git clone https://gitlab.pik-potsdam.de/cxesmc/climber-x-input.git input git clone git@gitlab.pik-potsdam.de:cxesmc/climber-x-input.git input # via ssh If you plan to make changes to the code, it is wise to check out a new branch: git checkout -b user-dev You should now be working on the branch user-dev . 2. Create the system-specific Makefile To compile CLIMBER-X , you need to generate a Makefile that is appropriate for your system. In the folder config , you need to specify a configuration file that defines the compiler and flags, including definition of the paths to the NetCDF , FFTW , coordinates , Yelmo and LIS libraries. Note that it can be convenient to install FFTW , coordinates , Yelmo and LIS as subdirectories of the src/ folder, to be sure they are compiled consistently with CLIMBER-X . You can use another configuration file in the config folder as a template, e.g., cd config cp pik_ifort myhost_mycompiler Then you would modify the file myhost_mycompiler to match your paths. Back in climber-x , you can then generate your Makefile with the provided python configuration script: cd ../climber-x python config.py config/myhost_mycompiler The result should be a Makefile that is ready for use. 3. Compiling CLIMBER-X Assuming the source has been downloaded and configured, and all dependencies have also been compiled, now you are ready to compile CLIMBER-X : make clean make climber-clim There are currently four different flavors of CLIMBER-X that can be compiled: climber-clim : minimal climate configuration with atmosphere, ocean, sea ice and land climber-clim-bgc : clim plus with ocean biogeochemistry climber-clim-ice : clim plus with ice sheets climber-clim-bgc-ice : clim plus with ocean biogeochemistry and ice sheets These can be compiled by calling the individual names, e.g. make climber-clim or make climber-clim-bgc-ice . By default, it is also possible to call make climber as a shorter alias for make climber-clim-bgc-ice . The climate only version climber-clim corresponds to the version described by Willeit et al. (2022). This particular model setup does not require non-climate source code or the LIS library for compilation. That's it. The executable climber.x should now be available in the main directory. To compile the model with debug flags enabled use: make climber debug=1 By default, the model is compiled with openmp . To compile the model without openmp use: make climber openmp=0 This version should typically not be used. 4. Running CLIMBER-X After CLIMBER-X has been compiled, several steps must be completed to run the executable climber.x : Create a run directory ( RUNDIR ). Copy namelist parameter files to RUNDIR . Make links to the input , maps and restart directories in RUNDIR . Copy VILMA restart files to RUNDIR (since these are eventually modified by climber.x ). Copy the executable file climber.x to RUNDIR . To run on the cluster, create a job submission script (e.g. job.submit ) in RUNDIR to manage various computing options (number of processors, etc). When these steps are completed, climber.x should be run directly from RUNDIR using the job submission script. E.g., using SLURM: cd RUNDIR sbatch job.submit If not using the cluster, CLIMBER-X can also be run manually by entering the RUNDIR and running the following: cd RUNDIR ./climber.x > out.out Either of the above will run climber in RUNDIR with all simulation output stored in the same directory. Because the directory includes the executable and is self-contained, assuming the contents of the linked directories do not change, the simulation can be re-run at any time. To perform all of the above steps manually for multiple simulations is very tedious and time-consuming, so a \"run\" script called runme is used to handle the process. Using runme Before using runme , the user should store a configuration file with some personal choices. To get started, copy the template config file to the main directory: cp .runme/runme_config .runme_config Next edit .runme_config so that the choices match your configuration. Mostly, this means setting hpc to the name of your current system and account to the default account to be used for your jobs submitted via SLURM. Also you can add your email address if you would like to receive notifications from SLURM about your jobs. Now runme is ready for use. See ./runme -h for details on possible arguments. Note that aside from possible optional arguments, runme is always called with the required argument -o RUNDIR that specifies the output directory. So, to run a climber.x simulation as a job on the cluster in RUNDIR , run the command: ./runme -rs -o RUNDIR where RUNDIR is the desired run directory. The option -r says that the job should actually be run (instead of just prepared) and -s specifies that the job should be run on the cluster. If -r is used alone, then the job is simply run as a background process. Other options include -q, --queue for the queue alias (short, priority, etc.), -w, --wall for the maximum wall clock time to allow in format HH:MM:SS, --part to name the processor partition (priority, standard, smp, etc), --omp to specify the number of processors, and others. See ./runme -h for all options. When called as above, this script will run a simulation using the parameters as they are specified in the namelist parameter files in the nml directory. In addition, it is possible to modify the parameters of one simulation at the command line using the argument -p KEY=VAL KEY=VAL ... . So, for example, the following command: ./runme -s -o RUNDIR -p ctl.n_accel=10 will run climber.x on the cluster in the output directory RUNDIR with the control parameter control.n_accel set to 10 . Note that ctl is a convenient alias for the namelist group control , as defined in .runme/climberx_info.json . To perform a simulation an ensemble of simulations with modified parameter values, runme should be called via jobrun (see below). Using jobrun with runme jobrun is a command that is part of the Python runner library, found here: https://github.com/cxesmc/runner . This command facilitates running ensembles of simulations, or simulations with modified parameters via a convenient command-line interface. See Dependencies for its installation instructions. Using jobrun , the following command would produce the same simulation as ./runme -s RUNDIR : jobrun ./runme -rs -o OUTDIR The difference here is that now we don't specify the specific RUNDIR , but rather an encapsulating OUTDIR that will contain one or more RUNDIR 's. In the above example, no parameters are changed, so the simulation is saved in the default directory: OUTDIR/default . If we want to change a parameter, this can be done as with the runme script via the -p option: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=10 This will produce one simulation with the parameter control.n_accel=10 . Since we have changed a parameter for this simulation, jobrun treats this as an ensemble, so the output is saved in OUTDIR/0 for simulation 0. In short, the above command is equivalent to ./runme -s -o OUTDIR -p ctl.n_accel=10 , but in the former case, the output is stored in OUTDIR/0 and in the latter case, it is stored directly in OUTDIR . The power of jobrun comes when we want to run an ensemble: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=1,5,10 This ensemble of simulations will appear in OUTDIR/0 , OUTDIR/1 and OUTDIR/2 , respectively. A more informative output directory can be made using the option -a along with -o : jobrun ./runme -rs -a -o OUTDIR -p ctl.n_accel=1,5,10 In this case, the run directories are OUTDIR/ctl.nccl.1 , OUTDIR/ctl.nccl.5 and OUTDIR/ctl.nccl.10 , respectively. General information about the ensemble can be found in the main ensemble directory OUTDIR : params.txt : contains a table of the parameter combinations set on the command line (can be used to run a new ensemble). info.txt : the same parameter table as params.txt , but also including an index of the runid (0,1,2, etc) and the RUNDIR : info.txt : runid ctl.n_accel rundir 0 1 ctl.nccl.1 1 5 ctl.nccl.5 2 10 ctl.nccl.10 It is of course possible to define multiple parameter permutations: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=1,5,10 smb.alb_ice=0.3,0.4 To generate a more complex ensemble, using e.g. Latin-Hypercube sampling, then a two step approach is often better. First, use the runner command job sample to build the ensemble, then use jobrun to run it: # Generate ensemble parameters job sample -o lhs.txt --seed 4 -N 100 atm.c_trop_2=0.8,1.2 smb.alb_ice=0.3,0.4 # Run ensemble jobrun ./runme -rs -o OUTDIR -i lhs.txt This two-step method facilitates checking that the ensemble was generated properly and improves reproducibility, since the exact parameter values are available in the table. 5. Test simulation A simple climate-only test simulation for pre-industrial conditions can be run as: ./runme -rs -o OUTDIR","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Here you can find the basic information and steps needed to get CLIMBER-X running. Some step-by-step commands are given for specific environments. To see how to install CLIMBER-X on an HPC, see: Running-on-hpc for detailed instructions. There are currently four different flavors of CLIMBER-X that can be set up: climber-clim : minimal climate model configuration with atmosphere, ocean, sea ice and land (including dynamic vegetation) climber-clim-bgc : coupled climate-carbon cycle model configuration; clim plus with ocean biogeochemistry climber-clim-ice : coupled climate-ice sheet model configuration; clim plus with ice sheets climber-clim-bgc-ice : fully coupled model configuration; clim plus with ocean biogeochemistry and ice sheets The model dependencies vary according to the desired model configuration: Dependencies are: NetCDF, coordinates, Python3.x, runner, CDO Additional dependencies if using coupled ice sheets are: Yelmo, LIS See: Dependencies for more details.","title":"Getting started"},{"location":"getting-started/#directory-structure","text":"config/ Configuration files for compilation on different systems. input/ Location of any input data needed by the model. output/ Default location for model output. maps/ Location of the maps that will be generated to map/interpolate between different grids. nml/ Default parameter namelists that manage the model configuration. restart/ Location of the restart files needed to continue previous model simulations. src/ Source code for CLIMBER-X.","title":"Directory structure"},{"location":"getting-started/#usage","text":"Follow the steps below to (1) obtain the code, (2) configure the Makefile for your system, (3) compile an executable program and (4) run a test simulation.","title":"Usage"},{"location":"getting-started/#1-get-the-code","text":"Clone the repository from https://github.com/cxesmc/climber-x : # Clone code repository git clone https://github.com/cxesmc/climber-x.git git clone git@github.com:cxesmc/climber-x.git # via ssh cd climber-x # Clone input file directory git clone https://gitlab.pik-potsdam.de/cxesmc/climber-x-input.git input git clone git@gitlab.pik-potsdam.de:cxesmc/climber-x-input.git input # via ssh If you plan to make changes to the code, it is wise to check out a new branch: git checkout -b user-dev You should now be working on the branch user-dev .","title":"1. Get the code"},{"location":"getting-started/#2-create-the-system-specific-makefile","text":"To compile CLIMBER-X , you need to generate a Makefile that is appropriate for your system. In the folder config , you need to specify a configuration file that defines the compiler and flags, including definition of the paths to the NetCDF , FFTW , coordinates , Yelmo and LIS libraries. Note that it can be convenient to install FFTW , coordinates , Yelmo and LIS as subdirectories of the src/ folder, to be sure they are compiled consistently with CLIMBER-X . You can use another configuration file in the config folder as a template, e.g., cd config cp pik_ifort myhost_mycompiler Then you would modify the file myhost_mycompiler to match your paths. Back in climber-x , you can then generate your Makefile with the provided python configuration script: cd ../climber-x python config.py config/myhost_mycompiler The result should be a Makefile that is ready for use.","title":"2. Create the system-specific Makefile"},{"location":"getting-started/#3-compiling-climber-x","text":"Assuming the source has been downloaded and configured, and all dependencies have also been compiled, now you are ready to compile CLIMBER-X : make clean make climber-clim There are currently four different flavors of CLIMBER-X that can be compiled: climber-clim : minimal climate configuration with atmosphere, ocean, sea ice and land climber-clim-bgc : clim plus with ocean biogeochemistry climber-clim-ice : clim plus with ice sheets climber-clim-bgc-ice : clim plus with ocean biogeochemistry and ice sheets These can be compiled by calling the individual names, e.g. make climber-clim or make climber-clim-bgc-ice . By default, it is also possible to call make climber as a shorter alias for make climber-clim-bgc-ice . The climate only version climber-clim corresponds to the version described by Willeit et al. (2022). This particular model setup does not require non-climate source code or the LIS library for compilation. That's it. The executable climber.x should now be available in the main directory. To compile the model with debug flags enabled use: make climber debug=1 By default, the model is compiled with openmp . To compile the model without openmp use: make climber openmp=0 This version should typically not be used.","title":"3. Compiling CLIMBER-X"},{"location":"getting-started/#4-running-climber-x","text":"After CLIMBER-X has been compiled, several steps must be completed to run the executable climber.x : Create a run directory ( RUNDIR ). Copy namelist parameter files to RUNDIR . Make links to the input , maps and restart directories in RUNDIR . Copy VILMA restart files to RUNDIR (since these are eventually modified by climber.x ). Copy the executable file climber.x to RUNDIR . To run on the cluster, create a job submission script (e.g. job.submit ) in RUNDIR to manage various computing options (number of processors, etc). When these steps are completed, climber.x should be run directly from RUNDIR using the job submission script. E.g., using SLURM: cd RUNDIR sbatch job.submit If not using the cluster, CLIMBER-X can also be run manually by entering the RUNDIR and running the following: cd RUNDIR ./climber.x > out.out Either of the above will run climber in RUNDIR with all simulation output stored in the same directory. Because the directory includes the executable and is self-contained, assuming the contents of the linked directories do not change, the simulation can be re-run at any time. To perform all of the above steps manually for multiple simulations is very tedious and time-consuming, so a \"run\" script called runme is used to handle the process.","title":"4. Running CLIMBER-X"},{"location":"getting-started/#using-runme","text":"Before using runme , the user should store a configuration file with some personal choices. To get started, copy the template config file to the main directory: cp .runme/runme_config .runme_config Next edit .runme_config so that the choices match your configuration. Mostly, this means setting hpc to the name of your current system and account to the default account to be used for your jobs submitted via SLURM. Also you can add your email address if you would like to receive notifications from SLURM about your jobs. Now runme is ready for use. See ./runme -h for details on possible arguments. Note that aside from possible optional arguments, runme is always called with the required argument -o RUNDIR that specifies the output directory. So, to run a climber.x simulation as a job on the cluster in RUNDIR , run the command: ./runme -rs -o RUNDIR where RUNDIR is the desired run directory. The option -r says that the job should actually be run (instead of just prepared) and -s specifies that the job should be run on the cluster. If -r is used alone, then the job is simply run as a background process. Other options include -q, --queue for the queue alias (short, priority, etc.), -w, --wall for the maximum wall clock time to allow in format HH:MM:SS, --part to name the processor partition (priority, standard, smp, etc), --omp to specify the number of processors, and others. See ./runme -h for all options. When called as above, this script will run a simulation using the parameters as they are specified in the namelist parameter files in the nml directory. In addition, it is possible to modify the parameters of one simulation at the command line using the argument -p KEY=VAL KEY=VAL ... . So, for example, the following command: ./runme -s -o RUNDIR -p ctl.n_accel=10 will run climber.x on the cluster in the output directory RUNDIR with the control parameter control.n_accel set to 10 . Note that ctl is a convenient alias for the namelist group control , as defined in .runme/climberx_info.json . To perform a simulation an ensemble of simulations with modified parameter values, runme should be called via jobrun (see below).","title":"Using runme"},{"location":"getting-started/#using-jobrun-with-runme","text":"jobrun is a command that is part of the Python runner library, found here: https://github.com/cxesmc/runner . This command facilitates running ensembles of simulations, or simulations with modified parameters via a convenient command-line interface. See Dependencies for its installation instructions. Using jobrun , the following command would produce the same simulation as ./runme -s RUNDIR : jobrun ./runme -rs -o OUTDIR The difference here is that now we don't specify the specific RUNDIR , but rather an encapsulating OUTDIR that will contain one or more RUNDIR 's. In the above example, no parameters are changed, so the simulation is saved in the default directory: OUTDIR/default . If we want to change a parameter, this can be done as with the runme script via the -p option: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=10 This will produce one simulation with the parameter control.n_accel=10 . Since we have changed a parameter for this simulation, jobrun treats this as an ensemble, so the output is saved in OUTDIR/0 for simulation 0. In short, the above command is equivalent to ./runme -s -o OUTDIR -p ctl.n_accel=10 , but in the former case, the output is stored in OUTDIR/0 and in the latter case, it is stored directly in OUTDIR . The power of jobrun comes when we want to run an ensemble: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=1,5,10 This ensemble of simulations will appear in OUTDIR/0 , OUTDIR/1 and OUTDIR/2 , respectively. A more informative output directory can be made using the option -a along with -o : jobrun ./runme -rs -a -o OUTDIR -p ctl.n_accel=1,5,10 In this case, the run directories are OUTDIR/ctl.nccl.1 , OUTDIR/ctl.nccl.5 and OUTDIR/ctl.nccl.10 , respectively. General information about the ensemble can be found in the main ensemble directory OUTDIR : params.txt : contains a table of the parameter combinations set on the command line (can be used to run a new ensemble). info.txt : the same parameter table as params.txt , but also including an index of the runid (0,1,2, etc) and the RUNDIR : info.txt : runid ctl.n_accel rundir 0 1 ctl.nccl.1 1 5 ctl.nccl.5 2 10 ctl.nccl.10 It is of course possible to define multiple parameter permutations: jobrun ./runme -rs -o OUTDIR -p ctl.n_accel=1,5,10 smb.alb_ice=0.3,0.4 To generate a more complex ensemble, using e.g. Latin-Hypercube sampling, then a two step approach is often better. First, use the runner command job sample to build the ensemble, then use jobrun to run it: # Generate ensemble parameters job sample -o lhs.txt --seed 4 -N 100 atm.c_trop_2=0.8,1.2 smb.alb_ice=0.3,0.4 # Run ensemble jobrun ./runme -rs -o OUTDIR -i lhs.txt This two-step method facilitates checking that the ensemble was generated properly and improves reproducibility, since the exact parameter values are available in the table.","title":"Using jobrun with runme"},{"location":"getting-started/#5-test-simulation","text":"A simple climate-only test simulation for pre-industrial conditions can be run as: ./runme -rs -o OUTDIR","title":"5. Test simulation"},{"location":"running-on-hpc/","text":"Running on an HPC Notes for specific systems Running at PIK on HPC2024 (foote) The following modules have to be loaded in order to compile and run the model. For convenience you can also add those commands to your .profile file in your home directory. module purge module use /p/system/modulefiles/compiler \\ /p/system/modulefiles/gpu \\ /p/system/modulefiles/libraries \\ /p/system/modulefiles/parallel \\ /p/system/modulefiles/tools module load intel/oneAPI/2024.0.0 module load netcdf-c/4.9.2 module load netcdf-fortran-intel/4.6.1 module load udunits/2.2.28 module load ncview/2.1.10 module load cdo/2.4.2 When installing fesm-utils (see Dependencies ) use the pik script: ./install_pik.sh ifx Running at AWI on albedo Load the following modules in your .bashrc file in your home directory. module load intel-oneapi-compilers/2024.0.0 module load netcdf-c/4.8.1-openmpi4.1.3-oneapi2022.1.0 module load netcdf-fortran/4.5.4-oneapi2022.1.0 module load udunits/2.2.28 module load ncview/2.1.8 module load cdo/2.2.0 module load python/3.10.4 When installing fesm-utils (see Dependencies ) use the awi script (which is actually a link to the dkrz script since they work the same way): ./install_awi.sh ifx Running at DKRZ on levante Load the following modules in your .bashrc file in your home directory. # Tools module load cdo/2.4.0-gcc-11.2.0 module load esmvaltool/2.5.0 module load ncview/2.1.8-gcc-11.2.0 module load git/2.43.3-gcc-11.2.0 module load python3/2023.01-gcc-11.2.0 # Compilers and libs module load intel-oneapi-compilers/2023.2.1-gcc-11.2.0 module load netcdf-c/4.8.1-openmpi-4.1.2-intel-2021.5.0 module load netcdf-fortran/4.5.3-openmpi-4.1.2-intel-2021.5.0 When installing fesm-utils (see Dependencies ) use the dkrz script: ./install_dkrz.sh ifx Get the code CLIMBER-X climate model ### Download the CLIMBER-X code ### # Clone repository git clone https://github.com/cxesmc/climber-x.git git clone git@github.com:cxesmc/climber-x.git # via ssh # Enter directory cd climber-x # Run configuration script python config.py config/pik_hpc2024_ifx # Or config file for your system # Clone input file directory git clone https://gitlab.pik-potsdam.de/cxesmc/climber-x-input.git input git clone git@gitlab.pik-potsdam.de:cxesmc/climber-x-input.git input # via ssh # Step back and clone and install external libraries repository cd .. git clone git@github.com:fesmc/fesm-utils.git cd fesm-utils ./install_pik.sh ifx # Use install_dkrz.sh as needed FESMUSRC=$PWD cd ../climber-x/ ln -s $FESMUSRC ./src/utils/ # Download and configure coordinates cd src/utils/ git clone git@github.com:fesmc/coordinates.git cd coordinates python3 config.py config/pik_hpc2024_ifx # Or config file for your system cd ../../.. # Return to climber-x parent directory # Install other external utils library cd src/utils/fesm-utils/utils python config.py config/pik_hpc2024_ifx # replace with config file for your system make clean make fesmutils-static openmp=0 # serial version make fesmutils-static openmp=1 # parallel version cd ../../../.. # Return to climber-x parent directory ### Compile and run ### # Compile the climate model make cleanall make climber-clim # Set up your `runme` config file for your system cp .runme/runme_config .runme_config # - Edit hpc and account name to match your settings # Make sure to install the `runner` package too pip install https://github.com/fesmc/runner/archive/refs/heads/master.zip # Run a pre-industrial equilibrium climate-only test simulation ./runme -rs -q short --omp 32 -o output/clim CLIMBER-X climate and carbon cycle model If you would also like to run CLIMBER-X with an interactive carbon cycle, then the HAMOCC ocean biogeochemistry ( bgc ) code must also be downloaded: # bgc cd src/ git clone git@github.com:cxesmc/bgc.git cd bgc/ git submodule update --init --recursive # for submodule M4AGO cd ../.. Since the HAMOCC model code is not open source, the bgc repository is private at the moment and you need to be given permission in order to access it. HAMOCC is covered by the Max Planck Institute for Meteorology software licence agreement as part of the MPI-ESM ( https://code.mpimet.mpg.de/attachments/download/26986/MPI-ESM_SLA_v3.4.pdf ). A pre-requisite to access the bgc repository is therefore that you agree to the MPI-ESM license by following the steps outlined here: https://code.mpimet.mpg.de/projects/mpi-esm-license . Once you have done so, send an email to Matteo Willeit and you will be granted permission to access the bgc repository. # Compile the climate and carbon cycle model make clean make climber-clim-bgc # Run a pre-industrial equilibrium simulation with ocean biogeochemistry ./runme -rs -q short --omp 16 -o output/clim-bgc -p ctl.flag_bgc=T CLIMBER-X climate and ice sheet model If you would also like to run with an interactive ice sheet, the Yelmo ice-sheet code must be downloaded and configured and the solid Earth model VILMA libraries must be downloaded before compiling: # yelmo cd src git clone git@github.com:palma-ice/yelmo.git cd yelmo git checkout climber-x # Get climber-x branch python3 config.py config/pik_hpc2024_ifx # Or config file for your system ln -s $FESMUSRC . # Link absolute path cd ../.. # Return to climber-x parent directory # vilma cd src/ git clone git@github.com:cxesmc/vilma.git # private repository, premission needed cd .. Since the VILMA model code is not open source, the vilma repository is private at the moment and you need to be given permission in order to access it. Please send an email to Matteo Willeit and Volker Klemann and you will be granted permission to access the vilma repository. # Compile the climate and ice sheet model make clean make climber-clim-ice # Run pre-industrial equilibrium simulation with interactive Greenland ice sheet ./runme -rs -q short --omp 16 -o output/clim-ice -p ctl.flag_ice=T ctl.flag_geo=T ctl.flag_smb=T ctl.flag_imo=T ctl.ice_model_name=yelmo ctl.ice_domain_name=GRL-16KM Fully coupled CLIMBER-X configuration If you have followed all steps above you will also be ready to run fully coupled simulations: # Compile the fully coupled model make clean make climber-clim-bgc-ice # or equivalently make climber # Run pre-industrial equilibrium simulation with ocean biogeochemistry and interactive Greenland ice sheet ./runme -s -q short --omp 16 -o output/clim-bgc-ice -p ctl.flag_bgc=T ctl.flag_ice=T ctl.flag_geo=T ctl.flag_smb=T ctl.flag_imo=T ctl.ice_model_name=yelmo ctl.ice_domain_name=GRL-16KM","title":"Running on an HPC"},{"location":"running-on-hpc/#running-on-an-hpc","text":"","title":"Running on an HPC"},{"location":"running-on-hpc/#notes-for-specific-systems","text":"","title":"Notes for specific systems"},{"location":"running-on-hpc/#running-at-pik-on-hpc2024-foote","text":"The following modules have to be loaded in order to compile and run the model. For convenience you can also add those commands to your .profile file in your home directory. module purge module use /p/system/modulefiles/compiler \\ /p/system/modulefiles/gpu \\ /p/system/modulefiles/libraries \\ /p/system/modulefiles/parallel \\ /p/system/modulefiles/tools module load intel/oneAPI/2024.0.0 module load netcdf-c/4.9.2 module load netcdf-fortran-intel/4.6.1 module load udunits/2.2.28 module load ncview/2.1.10 module load cdo/2.4.2 When installing fesm-utils (see Dependencies ) use the pik script: ./install_pik.sh ifx","title":"Running at PIK on HPC2024 (foote)"},{"location":"running-on-hpc/#running-at-awi-on-albedo","text":"Load the following modules in your .bashrc file in your home directory. module load intel-oneapi-compilers/2024.0.0 module load netcdf-c/4.8.1-openmpi4.1.3-oneapi2022.1.0 module load netcdf-fortran/4.5.4-oneapi2022.1.0 module load udunits/2.2.28 module load ncview/2.1.8 module load cdo/2.2.0 module load python/3.10.4 When installing fesm-utils (see Dependencies ) use the awi script (which is actually a link to the dkrz script since they work the same way): ./install_awi.sh ifx","title":"Running at AWI on albedo"},{"location":"running-on-hpc/#running-at-dkrz-on-levante","text":"Load the following modules in your .bashrc file in your home directory. # Tools module load cdo/2.4.0-gcc-11.2.0 module load esmvaltool/2.5.0 module load ncview/2.1.8-gcc-11.2.0 module load git/2.43.3-gcc-11.2.0 module load python3/2023.01-gcc-11.2.0 # Compilers and libs module load intel-oneapi-compilers/2023.2.1-gcc-11.2.0 module load netcdf-c/4.8.1-openmpi-4.1.2-intel-2021.5.0 module load netcdf-fortran/4.5.3-openmpi-4.1.2-intel-2021.5.0 When installing fesm-utils (see Dependencies ) use the dkrz script: ./install_dkrz.sh ifx","title":"Running at DKRZ on levante"},{"location":"running-on-hpc/#get-the-code","text":"","title":"Get the code"},{"location":"running-on-hpc/#climber-x-climate-model","text":"### Download the CLIMBER-X code ### # Clone repository git clone https://github.com/cxesmc/climber-x.git git clone git@github.com:cxesmc/climber-x.git # via ssh # Enter directory cd climber-x # Run configuration script python config.py config/pik_hpc2024_ifx # Or config file for your system # Clone input file directory git clone https://gitlab.pik-potsdam.de/cxesmc/climber-x-input.git input git clone git@gitlab.pik-potsdam.de:cxesmc/climber-x-input.git input # via ssh # Step back and clone and install external libraries repository cd .. git clone git@github.com:fesmc/fesm-utils.git cd fesm-utils ./install_pik.sh ifx # Use install_dkrz.sh as needed FESMUSRC=$PWD cd ../climber-x/ ln -s $FESMUSRC ./src/utils/ # Download and configure coordinates cd src/utils/ git clone git@github.com:fesmc/coordinates.git cd coordinates python3 config.py config/pik_hpc2024_ifx # Or config file for your system cd ../../.. # Return to climber-x parent directory # Install other external utils library cd src/utils/fesm-utils/utils python config.py config/pik_hpc2024_ifx # replace with config file for your system make clean make fesmutils-static openmp=0 # serial version make fesmutils-static openmp=1 # parallel version cd ../../../.. # Return to climber-x parent directory ### Compile and run ### # Compile the climate model make cleanall make climber-clim # Set up your `runme` config file for your system cp .runme/runme_config .runme_config # - Edit hpc and account name to match your settings # Make sure to install the `runner` package too pip install https://github.com/fesmc/runner/archive/refs/heads/master.zip # Run a pre-industrial equilibrium climate-only test simulation ./runme -rs -q short --omp 32 -o output/clim","title":"CLIMBER-X climate model"},{"location":"running-on-hpc/#climber-x-climate-and-carbon-cycle-model","text":"If you would also like to run CLIMBER-X with an interactive carbon cycle, then the HAMOCC ocean biogeochemistry ( bgc ) code must also be downloaded: # bgc cd src/ git clone git@github.com:cxesmc/bgc.git cd bgc/ git submodule update --init --recursive # for submodule M4AGO cd ../.. Since the HAMOCC model code is not open source, the bgc repository is private at the moment and you need to be given permission in order to access it. HAMOCC is covered by the Max Planck Institute for Meteorology software licence agreement as part of the MPI-ESM ( https://code.mpimet.mpg.de/attachments/download/26986/MPI-ESM_SLA_v3.4.pdf ). A pre-requisite to access the bgc repository is therefore that you agree to the MPI-ESM license by following the steps outlined here: https://code.mpimet.mpg.de/projects/mpi-esm-license . Once you have done so, send an email to Matteo Willeit and you will be granted permission to access the bgc repository. # Compile the climate and carbon cycle model make clean make climber-clim-bgc # Run a pre-industrial equilibrium simulation with ocean biogeochemistry ./runme -rs -q short --omp 16 -o output/clim-bgc -p ctl.flag_bgc=T","title":"CLIMBER-X climate and carbon cycle model"},{"location":"running-on-hpc/#climber-x-climate-and-ice-sheet-model","text":"If you would also like to run with an interactive ice sheet, the Yelmo ice-sheet code must be downloaded and configured and the solid Earth model VILMA libraries must be downloaded before compiling: # yelmo cd src git clone git@github.com:palma-ice/yelmo.git cd yelmo git checkout climber-x # Get climber-x branch python3 config.py config/pik_hpc2024_ifx # Or config file for your system ln -s $FESMUSRC . # Link absolute path cd ../.. # Return to climber-x parent directory # vilma cd src/ git clone git@github.com:cxesmc/vilma.git # private repository, premission needed cd .. Since the VILMA model code is not open source, the vilma repository is private at the moment and you need to be given permission in order to access it. Please send an email to Matteo Willeit and Volker Klemann and you will be granted permission to access the vilma repository. # Compile the climate and ice sheet model make clean make climber-clim-ice # Run pre-industrial equilibrium simulation with interactive Greenland ice sheet ./runme -rs -q short --omp 16 -o output/clim-ice -p ctl.flag_ice=T ctl.flag_geo=T ctl.flag_smb=T ctl.flag_imo=T ctl.ice_model_name=yelmo ctl.ice_domain_name=GRL-16KM","title":"CLIMBER-X climate and ice sheet model"},{"location":"running-on-hpc/#fully-coupled-climber-x-configuration","text":"If you have followed all steps above you will also be ready to run fully coupled simulations: # Compile the fully coupled model make clean make climber-clim-bgc-ice # or equivalently make climber # Run pre-industrial equilibrium simulation with ocean biogeochemistry and interactive Greenland ice sheet ./runme -s -q short --omp 16 -o output/clim-bgc-ice -p ctl.flag_bgc=T ctl.flag_ice=T ctl.flag_geo=T ctl.flag_smb=T ctl.flag_imo=T ctl.ice_model_name=yelmo ctl.ice_domain_name=GRL-16KM","title":"Fully coupled CLIMBER-X configuration"},{"location":"var-list/","text":"Variables list Atmosphere atm.nc variable dimension description unit fw_atl_indpac 2d Freshwater transport from Atlantic to Indo-Pacific catchment Sv fw_pac_atl 2d Freshwater transport from Pacific to Atlantic catchment Sv had_fi Deg had_width Deg acbarz 3d Zonal mean cross-isobar angle Rad coszm 3d Radiation weighted daily mean cosine of solar zenith angle ekez 3d Zonal mean eddy kinetic energy M2/s2 faycptg 3d Meridional cp*T transport by mean circulation PW faydseg 3d Meridional dry static energy transport by mean circulation PW fayg fayleg 3d Meridional latent heat transport by mean circulation PW faywtrg 3d Meridional moisture transport by mean circulation Kg/s frlnd 3d Land fraction in grid cell frocn 3d Ocean fraction in grid cell fyseg 3d Total meridional dry static energy transport PW fyheatg 3d Total meridional heat transport PW fyleg 3d Total meridional latent heat transport PW fywtrg 3d Total meridional moisture transport Kg/s ptrop 3d Relative pressure at tropopause slope 3d Topography slope m/m slope_x 3d Topography slope in zonal direction m/m slope_y 3d Topography slope in meridional direction m/m slpz 3d Zonal mean sea level pressure Pa solarm 3d Daily mean TOA incoming solar radiation W/m2 tskslz 3d Zonal mean skin temperature reduced to sea level K tslz 3d Zonal mean sea level temperature K uz500 3d Zonal mean 500 hPa zonal wind m/s uz850 3d Zonal mean 850 hPa zonal wind m/s vabz 3d Zonal mean meidional ageostrophic wind in PBL m/s zsa 3d Grid cell average surface elevation M zsa_smooth 3d Grid cell average smoothed surface elevation M ri 4d Bulk Richardson number acbar 4d Cross-isobar angle Rad alb_cld 4d Cloud albedo alb_plan 4d Planetary albedo alb_sur_cld 4d Cloudy-sky surface albedo alb_sur_cs 4d Clear-sky surface albedo aslp 4d Azonal sea level pressure Pa aslp_temp 4d Azonal sea level pressure from azonal temperature Pa aslp_topo 4d Azonal sea level pressure from topographic stationary waves Pa atsksl 4d Azonal sea level temperature K atsl 4d Azonal sea level temperature K atsli 4d Azonal sea level temperature K cd0a 4d Grid-cell average drag coefficient without orographic component ----------------- ----------- --------------------------------------------------------------- ----------","title":"Variables list"},{"location":"var-list/#variables-list","text":"","title":"Variables list"},{"location":"var-list/#atmosphere","text":"","title":"Atmosphere"},{"location":"var-list/#atmnc","text":"variable dimension description unit fw_atl_indpac 2d Freshwater transport from Atlantic to Indo-Pacific catchment Sv fw_pac_atl 2d Freshwater transport from Pacific to Atlantic catchment Sv had_fi Deg had_width Deg acbarz 3d Zonal mean cross-isobar angle Rad coszm 3d Radiation weighted daily mean cosine of solar zenith angle ekez 3d Zonal mean eddy kinetic energy M2/s2 faycptg 3d Meridional cp*T transport by mean circulation PW faydseg 3d Meridional dry static energy transport by mean circulation PW fayg fayleg 3d Meridional latent heat transport by mean circulation PW faywtrg 3d Meridional moisture transport by mean circulation Kg/s frlnd 3d Land fraction in grid cell frocn 3d Ocean fraction in grid cell fyseg 3d Total meridional dry static energy transport PW fyheatg 3d Total meridional heat transport PW fyleg 3d Total meridional latent heat transport PW fywtrg 3d Total meridional moisture transport Kg/s ptrop 3d Relative pressure at tropopause slope 3d Topography slope m/m slope_x 3d Topography slope in zonal direction m/m slope_y 3d Topography slope in meridional direction m/m slpz 3d Zonal mean sea level pressure Pa solarm 3d Daily mean TOA incoming solar radiation W/m2 tskslz 3d Zonal mean skin temperature reduced to sea level K tslz 3d Zonal mean sea level temperature K uz500 3d Zonal mean 500 hPa zonal wind m/s uz850 3d Zonal mean 850 hPa zonal wind m/s vabz 3d Zonal mean meidional ageostrophic wind in PBL m/s zsa 3d Grid cell average surface elevation M zsa_smooth 3d Grid cell average smoothed surface elevation M ri 4d Bulk Richardson number acbar 4d Cross-isobar angle Rad alb_cld 4d Cloud albedo alb_plan 4d Planetary albedo alb_sur_cld 4d Cloudy-sky surface albedo alb_sur_cs 4d Clear-sky surface albedo aslp 4d Azonal sea level pressure Pa aslp_temp 4d Azonal sea level pressure from azonal temperature Pa aslp_topo 4d Azonal sea level pressure from topographic stationary waves Pa atsksl 4d Azonal sea level temperature K atsl 4d Azonal sea level temperature K atsli 4d Azonal sea level temperature K cd0a 4d Grid-cell average drag coefficient without orographic component ----------------- ----------- --------------------------------------------------------------- ----------","title":"atm.nc"},{"location":"use-cases/use-cases/","text":"Use case: piControl (General description) (Link to some CMIP info? protocols, whatever) Basic run ./runme -rs -q short -w 24:00:00 --omp 32 -o output/$outdir/preind -p ctl.nyears=10000 ctl.i_write_restart=1 (Explain parameters choices, etc) Typical output Alternate configurations ...","title":"Use cases"},{"location":"use-cases/use-cases/#use-case-picontrol","text":"(General description) (Link to some CMIP info? protocols, whatever)","title":"Use case: piControl"},{"location":"use-cases/use-cases/#basic-run","text":"./runme -rs -q short -w 24:00:00 --omp 32 -o output/$outdir/preind -p ctl.nyears=10000 ctl.i_write_restart=1 (Explain parameters choices, etc)","title":"Basic run"},{"location":"use-cases/use-cases/#typical-output","text":"","title":"Typical output"},{"location":"use-cases/use-cases/#alternate-configurations","text":"...","title":"Alternate configurations"},{"location":"use-cases/01-piControl/","text":"Use case: piControl (General description) (Link to some CMIP info? protocols, whatever) Basic run ./runme -rs -q short -w 24:00:00 --omp 32 -o output/$outdir/preind -p ctl.nyears=10000 ctl.i_write_restart=1 (Explain parameters choices, etc) Typical output Alternate configurations ...","title":"Use case: piControl"},{"location":"use-cases/01-piControl/#use-case-picontrol","text":"(General description) (Link to some CMIP info? protocols, whatever)","title":"Use case: piControl"},{"location":"use-cases/01-piControl/#basic-run","text":"./runme -rs -q short -w 24:00:00 --omp 32 -o output/$outdir/preind -p ctl.nyears=10000 ctl.i_write_restart=1 (Explain parameters choices, etc)","title":"Basic run"},{"location":"use-cases/01-piControl/#typical-output","text":"","title":"Typical output"},{"location":"use-cases/01-piControl/#alternate-configurations","text":"...","title":"Alternate configurations"}]}